use utility::ResultType;

/**
 *  \brief Trait that defines CSV serializers and deserializers.
 *
 *  The `to_tbt` method should return a `String` in CSV or TBT, with
 *  headers, while the `from_tbt` method should create a struct
 *  instance from a CSV or TBT string with headers.
 */
/// Trait to serialize to and from CSV.
pub trait Csv: Sized {
    /// Export model to CSV (with headers).
    fn to_csv(&self, delimiter: u8) -> ResultType<String>;

    /// Import model from CSV (with headers).
    ///
    /// Works identically to a collection importer, only fetches at max
    /// 1 record, since the headers are shared over all records.
    fn from_csv(text: &str, d) -> ResultType<Self>;
}


/**
 *  \brief Specialized version of the Csv trait for collections.
 */
pub trait CsvCollection: Sized {
    /**
     *  \brief Export collection of UniProt records to CSV or TBT.
     *
     *  `to_csv_strict` requires all records inside the collection
     *  to be valid, or returns an `Err`, while `to_csv_lenient` will
     *  return as many formatted records as possible, returning an error
     *  only if no records are valid.
     */
     fn to_csv_strict(&self) -> ResultType<String>;
     fn to_csv_lenient(&self) -> ResultType<String>;

     /**
     *  \brief Import record collection from CSV or TBT.
     *
     *  `from_csv_strict` requires all records inside the text
     *  to be valid, or returns an `Err`, while `to_csv_lenient` will
     *  return as many record structs as possible, returning an error
     *  only if no records are valid.
     */
    fn from_csv_strict(text: &str) -> ResultType<Self>;
    fn from_csv_lenient(text: &str) -> ResultType<Self>;
}
